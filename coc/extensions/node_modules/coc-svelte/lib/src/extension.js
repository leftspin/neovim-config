"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.activateSvelteLanguageServer = exports.deactivate = exports.activate = void 0;
const coc_nvim_1 = require("coc.nvim");
const path_1 = __importDefault(require("path"));
const autoClose_1 = require("./html/autoClose");
const findComponentReferences_1 = require("./typescript/findComponentReferences");
const findFileReferences_1 = require("./typescript/findFileReferences");
const tsplugin_1 = require("./tsplugin");
const sveltekit_1 = require("./sveltekit");
let lsApi;
function activate(context) {
    // The extension is activated on TS/JS/Svelte files because else it might be too late to configure the TS plugin:
    // If we only activate on Svelte file and the user opens a TS file first, the configuration command is issued too late.
    // We wait until there's a Svelte file open and only then start the actual language client.
    const tsPlugin = new tsplugin_1.TsPlugin(context);
    if (coc_nvim_1.workspace.textDocuments.some((doc) => doc.languageId === 'svelte')) {
        lsApi = activateSvelteLanguageServer(context);
        tsPlugin.askToEnable();
    }
    else {
        const onTextDocumentListener = coc_nvim_1.workspace.onDidOpenTextDocument((doc) => {
            if (doc.languageId === 'svelte') {
                lsApi = activateSvelteLanguageServer(context);
                tsPlugin.askToEnable();
                onTextDocumentListener.dispose();
            }
        });
        context.subscriptions.push(onTextDocumentListener);
    }
    (0, sveltekit_1.setupSvelteKit)(context);
    // This API is considered private and only exposed for experimenting.
    // Interface may change at any time. Use at your own risk!
    return {
        /**
         * As a function, because restarting the server
         * will result in another instance.
         */
        getLanguageServer() {
            if (!lsApi) {
                lsApi = activateSvelteLanguageServer(context);
            }
            return lsApi.getLS();
        },
    };
}
exports.activate = activate;
function deactivate() {
    const stop = lsApi?.getLS().stop();
    lsApi = undefined;
    return stop;
}
exports.deactivate = deactivate;
function activateSvelteLanguageServer(context) {
    const runtimeConfig = coc_nvim_1.workspace.getConfiguration('svelte.language-server');
    const { workspaceFolders } = coc_nvim_1.workspace;
    const rootPath = Array.isArray(workspaceFolders)
        ? coc_nvim_1.Uri.parse(workspaceFolders[0].uri).fsPath
        : undefined;
    const tempLsPath = runtimeConfig.get('ls-path');
    const lsPath = tempLsPath && tempLsPath.trim() !== ''
        ? path_1.default.isAbsolute(tempLsPath)
            ? tempLsPath
            : path_1.default.join(rootPath, tempLsPath)
        : undefined;
    const serverModule = require.resolve(lsPath || 'svelte-language-server/bin/server.js');
    // Add --experimental-modules flag for people using node 12 < version < 12.17
    // Remove this in mid 2022
    const runExecArgv = ['--experimental-modules'];
    let port = runtimeConfig.get('port') ?? -1;
    if (port < 0) {
        port = 6009;
    }
    else {
        console.log('setting port to', port);
        runExecArgv.push(`--inspect=${port}`);
    }
    const debugOptions = { execArgv: ['--nolazy', '--experimental-modules', `--inspect=${port}`] };
    const serverOptions = {
        run: {
            module: serverModule,
            transport: coc_nvim_1.TransportKind.ipc,
            options: { execArgv: runExecArgv },
        },
        debug: { module: serverModule, transport: coc_nvim_1.TransportKind.ipc, options: debugOptions },
    };
    const serverRuntime = runtimeConfig.get('runtime');
    if (serverRuntime) {
        serverOptions.run.runtime = serverRuntime;
        serverOptions.debug.runtime = serverRuntime;
        console.log('setting server runtime to', serverRuntime);
    }
    const clientOptions = {
        documentSelector: [{ scheme: 'file', language: 'svelte' }],
        revealOutputChannelOn: coc_nvim_1.RevealOutputChannelOn.Never,
        synchronize: {
            configurationSection: [
                'svelte',
                'javascript',
                'typescript',
                'prettier',
                'css',
                'less',
                'scss',
                'html',
            ],
            fileEvents: coc_nvim_1.workspace.createFileSystemWatcher('{**/*.js,**/*.ts}', false, false, false),
        },
        initializationOptions: { config: coc_nvim_1.workspace.getConfiguration('svelte.plugin') },
    };
    let ls = createLanguageServer(serverOptions, clientOptions);
    ls.start().then(() => {
        const tagRequestor = (document, position) => {
            const param = {
                textDocument: { uri: document.uri },
                position,
            };
            return ls.sendRequest('html/tag', param);
        };
        const disposable = (0, autoClose_1.activateTagClosing)(tagRequestor, { svelte: true }, 'html.autoClosingTags');
        context.subscriptions.push(disposable);
        coc_nvim_1.window.showInformationMessage('Svelte language server now active.');
    });
    context.subscriptions.push(coc_nvim_1.commands.registerCommand('svelte.restartLanguageServer', async () => {
        await restartLS(true);
    }));
    async function restartLS(showNotification) {
        await ls.stop();
        ls = createLanguageServer(serverOptions, clientOptions);
        context.subscriptions.push(coc_nvim_1.services.registerLanguageClient(ls));
        await ls.onReady().then(() => {
            if (showNotification) {
                coc_nvim_1.window.showInformationMessage('Svelte language server restarted.');
            }
        });
    }
    function getLS() {
        return ls;
    }
    addDidChangeTextDocumentListener(getLS, context);
    (0, findFileReferences_1.addFindFileReferencesListener)(getLS, context);
    (0, findComponentReferences_1.addFindComponentReferencesListener)(getLS, context);
    return {
        getLS,
    };
}
exports.activateSvelteLanguageServer = activateSvelteLanguageServer;
function addDidChangeTextDocumentListener(getLS, context) {
    // Only Svelte file changes are automatically notified through the inbuilt LSP
    // because the extension says it's only responsible for Svelte files.
    // Therefore we need to set this up for TS/JS files manually.
    const disposable = coc_nvim_1.workspace.onDidChangeTextDocument((evt) => {
        if (evt.textDocument.uri.endsWith('.ts') || evt.textDocument.uri.endsWith('.js')) {
            getLS().sendNotification('$/onDidChangeTsOrJsFile', {
                uri: evt.textDocument.uri,
                changes: evt.contentChanges.map((c) => ({
                    range: {
                        start: { line: c.range.start.line, character: c.range.start.character },
                        end: { line: c.range.end.line, character: c.range.end.character },
                    },
                    text: c.text,
                })),
            });
        }
    });
    context.subscriptions.push(disposable);
}
function createLanguageServer(serverOptions, clientOptions) {
    return new coc_nvim_1.LanguageClient('svelte', 'Svelte', serverOptions, clientOptions);
}
//# sourceMappingURL=extension.js.map