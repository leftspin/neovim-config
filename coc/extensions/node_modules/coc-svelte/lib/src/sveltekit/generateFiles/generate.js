"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateResources = void 0;
const coc_nvim_1 = require("coc.nvim");
const path_1 = require("path");
const types_1 = require("./types");
function getFilePathFromConfig(config, resource) {
    const ext = resource.type === types_1.FileType.PAGE ? config.pageExtension : config.scriptExtension;
    return (0, path_1.join)(config.path, `${resource.filename}.${ext}`);
}
async function generateResources(config) {
    // The dir may need to be created, but there isn't an easy way in coc.nvim
    const filepathsAndResources = config.resources.map((resource) => [
        getFilePathFromConfig(config, resource),
        resource,
    ]);
    for (const [filepath, resource] of filepathsAndResources) {
        const data = await resource.generate(config);
        await coc_nvim_1.workspace.createFile(filepath);
        const edits = {
            changes: {
                [filepath]: [coc_nvim_1.TextEdit.insert(coc_nvim_1.Position.create(0, 0), data)]
            }
        };
        coc_nvim_1.workspace.applyEdit(edits);
    }
    // save documents and open the first
    await Promise.all(filepathsAndResources.map(async ([uri], i) => {
        const doc = coc_nvim_1.workspace.textDocuments.find((t) => coc_nvim_1.Uri.parse(t.uri).path === coc_nvim_1.Uri.parse(uri).path);
        if (doc) {
            // double check whether the doc needs to be saved
            if (i === 0) {
                await coc_nvim_1.workspace.openTextDocument(uri);
            }
        }
    }));
}
exports.generateResources = generateResources;
//# sourceMappingURL=generate.js.map